<snippet>
	<content><![CDATA[
struct Mat {
	//this struct declaration assumes "mod" variable to be already defined globally
	int n, m;
	vector<vector<int>> a;

	Mat() { }
	Mat(int _n, int _m) {n = _n; m = _m; a.assign(n, vector<int>(m, 0)); }
	Mat(vector< vector<int> > v) { n = v.size(); m = n ? v[0].size() : 0; a = v; }

	inline void make_identity_matrix() {
		assert(n == m);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++)
				a[i][j] = i == j;
		}
	}
	inline void reduce_modulo_m(int m){
		for (int i = 0; i < n; i++)  {
			for (int j = 0; j < n; j++)
				a[i][j] = (a[i][j]%m + m)%m;
		}
	}
	
	inline Mat operator + (const Mat &b) {
		assert(n == b.n && m == b.m);
		Mat ans = Mat(n, m);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
		    	ans.a[i][j] = (a[i][j] + b.a[i][j]) % mod;
			}
		}
		return ans;
	} 
	inline Mat operator - (const Mat &b) {
		assert(n == b.n && m == b.m);
		Mat ans = Mat(n, m);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
		    	ans.a[i][j] = (a[i][j] - b.a[i][j] + mod) % mod;
			}
		}
		return ans;
	}
	inline Mat operator * (const Mat &b) {
		assert(m == b.n);
		Mat ans = Mat(n, b.m);
		for (int i = 0; i < n; i++) {
		    for (int j = 0; j < b.m; j++) {
		    	for (int k = 0; k < m; k++) {
		    		ans.a[i][j] = (ans.a[i][j] + 1LL * a[i][k] * b.a[k][j] % mod) % mod;
		    	}
			}
		}
		return ans;
	}
	inline Mat pow(long long k) {
		assert(n == m);
		Mat ans(n, n), t = a; ans.make_identity_matrix();
		while (k) {
			if (k & 1) ans = ans * t;
			t = t * t;
			k >>= 1;
		}
		return ans;
	}

	inline Mat& operator += (const Mat& b) { return *this = (*this) + b; }
	inline Mat& operator -= (const Mat& b) { return *this = (*this) - b; }
	inline Mat& operator *= (const Mat& b) { return *this = (*this) * b; }
	inline bool operator == (const Mat& b) { return a == b.a; }
	inline bool operator != (const Mat& b) { return a != b.a; }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>MATRIX</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>