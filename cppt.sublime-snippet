<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>

using namespace std;
#define ll              long long
#define infi			INT_MAX
const long long mod = 1000000007;
#define spc             " "
#define nline            "\n"
#define pii             pair<int,int>
#define all(a)          a.begin(), a.end()
#define print(a)        cout << (a) << nline;
#define print2(a,b)      cout << (a) << " " << (b) << nline;
#define logarr(arr,a,b)    for(int z=(a);z<=(b);z++) cout<<(arr[z])<<" ";cout<<endl;
#define printarr(arr,n) logarr(arr,0,(n)-1)
#define printmat(arr,r,c) for(int i=(0);i<(r);++i){logarr(arr[i],0,(c)-1)}
#define rep(i,_srt,_end)      for(int i=(_srt); i < (_end); ++i)

#ifndef ONLINE_JUDGE
    #define bug(...)        __f (#__VA_ARGS__, __VA_ARGS__)
#else
    #define bug(...) ;
#endif

template <typename Arg1>
void __f (const char* name, Arg1&& arg1) {cout << name << " : " << arg1 << endl; }
template <typename Arg1, typename... Args>
void __f (const char* names, Arg1&& arg1, Args&&... args)
{
	const char* comma = strchr (names + 1, ',');
	cout.write(names, comma - names) << " : " << arg1 << " | "; __f(comma + 1, args...);
}

template<typename T1, typename T2> // cin >> pair<T1, T2>
istream& operator>>(istream &istream, pair<T1,T2> &p){ return (istream >> p.first >> p.second); }

template<typename T> // cin >> vector<T>
istream& operator>>(istream &istream, vector<T> &v){
    for(auto &it: v) cin >> it;
    return istream;
}

template <typename T> // cout << vector<T>
ostream &operator<<(ostream &ostream, const vector<T> &c)
{
    for (auto &it : c)
        cout << it << " ";
    return ostream;
}

void file_i_o() {
    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);    
	#ifndef ONLINE_JUDGE
	    freopen("input.txt", "r", stdin);
	    //freopen("output.txt", "w", stdout);
	#endif
}

//---------------------------Jay Bajrangbali----------------------------

int32_t main(int32_t argc, char const *argv[]) {
	file_i_o();

	clock_t myclock = clock();

	
	
	cerr << "Run time: " << ((double)(clock() - myclock)/CLOCKS_PER_SEC) * 1000 << " ms" << endl;

	return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>basic</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.cpp</scope> -->
</snippet>