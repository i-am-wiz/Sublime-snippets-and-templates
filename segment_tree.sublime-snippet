<snippet>
	<content><![CDATA[
const int N = 3e5 + 9;
int a[N];
struct SegmentTree {

	int t[4 * N];
	int n;
	static const int inf = 1e9;

	SegmentTree() {
		memset(t, 0, sizeof t);
	}

	SegmentTree(int _n, int val = 0) {
		n = _n;
		for (int i = 0; i < 4 * N; ++i) t[i] = val;
		build(1, 0, n - 1);
	}

	void build(int in, int b, int e) {
		if(b == e){
		    t[in] = a[b];
		    return;
		}
		int mid = (b + e) >> 1;
		build(2 * in, b, mid);
		build(2 * in + 1, mid + 1, e);
		t[in] = max(t[2 * in], t[2 * in + 1]);
	}

	void update(int in, int b, int e, int i, int x) {
		if(b > i || e < i) return;
		if(b == e && b == i){
		    t[in] = x;
		    return;
		}
		int mid = (b + e) >> 1;
		update(2 * in, b, mid, i, x);
		update(2 * in + 1, mid + 1, e, i, x);
		t[in] = max(t[2 * in], t[2 * in + 1]);
	}

	void update(int i, int x) {
		update(1, 0, n - 1, i, x);
	}

	int query(int in, int b, int e, int l, int r) {
		if(b > r || e < l) return -inf;
		if(b >= l && e <= r) return t[in];
		int mid = (b + e) >> 1;
		int L = query(2 * in, b, mid, l, r);
		int R = query(2 * in + 1, mid + 1, e, l, r);
		return max(L, R);
	}

	int query(int l, int r) {
		return query(1, 0, n - 1, l, r);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SegTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
